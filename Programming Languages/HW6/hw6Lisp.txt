(defun removeNILTop (L)                                                            ;;;removeNILTop is passed a list and removes NIL at the top level.
    (COND ((NULL L) NIL)                                                           ;;; if list is null return NIL
          ((NOT (EQL nil (CAR L))) (CONS (CAR L) (removeNILTop(CDR L))))           ;;; checks to see if CAR L is not EQL to NIL CONS IF SO CONS CAR L and recurse
          (T (removeNILTop(CDR L)))                                                ;;; Else recurse with CDR L
    )
) 

;;;  #1 removeNILTop

(removeNILTop '(NIL X NIL NIL Y  NIL Z))
(removeNILTop '(X NIL Y NIL Z NIL))
(removeNILTop '(NIL (X NIL Y) (NIL NIL)))


(defun removeNILMost (L)                                                                  ;;;removeNILMos is passed a list and removes NIL at most levels.  
    (COND ((null L) nil)                                                                  ;;; if list is null return NIL       
          ((NOT (ATOM (CAR L))) (CONS (removeNILMost (CAR L)) (removeNILMost (CDR L))))   ;;; checks to see if CAR L is Not a ATOM --> cons recusive Car and CDR L
          ((EQL nil (CAR L)) (removeNILMost (CDR L)))                                 ;;; checks to see if CAR L is not EQL to NIL CONS IF SO CONS CAR L and recurse
          (T (CONS (CAR L) (removeNILMost (CDR L))))                                  ;;; Else cons CAR L and recurse with CDR L     
    )
) 
          


;;; #2 removeNILMost

(removeNILMost '(NIL X NIL NIL Y  NIL Z))
(removeNILMost '(X NIL (Y NIL Z) NIL))
(removeNILMost '(NIL (NIL) (X NIL Y) (NIL NIL) Z))
(removeNILMost '(NIL ( (((((NIL) NIL)))))))


(defun reverseTop (L)                                                   ;;; reverseTop is passed a list and returns a reversed list of the high-level entries
  (cond ((NULL L) nil)                                                  ;;; if list is null return NIL 
        (T (APPEND (reverseTop (CDR L)) (LIST (CAR L))))                ;;; ELSE APPEND recursively call to CDR L
  )
  
)

;;; #3 reverseTop

(reverseTop '(X Y Z))
(reverseTop '(X (Y Z (A)) (W)))

(defun reverseAll (L)
  (cond ((NULL L) nil)                                                              ;;;reverseAll is passed a list and returns a reversed list at all levels.  
        ((LISTP (CAR L)) (APPEND (reverseAll (CDR L)) (LIST (reverseAll (CAR L))))) ;;;IF CAR L is a LIST  APPEND recursive CDR L and List of CAR L
        (T (APPEND (reverseALL(CDR L)) (LIST (CAR L))))                             ;;;ELSE APPEND recursive CDR L and List of CAR L
  )
  
)

;;; #4 reverseALL

(reverseAll '(X Y Z))
(reverseAll '(X (Y Z (A)) (W)))

(defun palindrome (L)                                  ;;;palindrome is passed a list and returns T if the list is a palindrome; otherwise, it returns NIL. 
    (cond ((null L) nil)                               ;;; IF L is null return nil
          (T (equal L (reverse L)))                    ;;; Else check if L is equal to reverse L with Equal
    )
)

;;; #5 palindrome

(palindrome '(R A C E C A R))
(palindrome '(W A S I T A C A R O R A C A T I S A W))
(palindrome '(N I X O N))


(defun removeNILALL (L)                                                 ;;;removeNILAll is passed a List and removes any resulting NIL
    (COND ((NULL L) NIL)                                                ;;; return nil is L is null
          ((LISTP (CAR L)) (LET ((LEFTSIDE (removeNILALL (CAR L))) (RIGHTSIDE (removeNILALL (CDR L))))   ;;;Check if CAR L is a list is so recursive on CAR AND CDR
          (COND ( LEFTSIDE (CONS LEFTSIDE RIGHTSIDE))                                             ;;; IF LEFTSIDE CONS LEFTSIDE AND RIGHTSIDE (CAR AND CDR)
                ( T RIGHTSIDE))))                                                                 ;;;RIGHTSIDE
          ((NOT (EQL nil (CAR L))) (CONS (CAR L) (removeNILALL(CDR L))))             ;;; checks to see if CAR L is not EQL to NIL CONS IF SO CONS CAR L and recurse
          (T (APPEND (reverseNILALL(CDR L)) (reverseNILALL (CAR L))))                ;;; Else append recursive CDR and  CAR L
    )
)


;;; #6 removeNILALL

(removeNILAll '(NIL (NIL) (X NIL Y) (NIL NIL) Z))
(removeNILAll '(NIL ( (((((NIL) NIL)))))))
(removeNILAll '(NIL (X (NIL) Y) ((NIL)) ))
(removeNILAll '(NIL (((X ((((((((((NIL)))))))))) Y) Z) W) (((NIL))) ))

